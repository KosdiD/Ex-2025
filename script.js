// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let markersVisible = true;
let tempMarkerPosition = null;
let markerCounter = 1;
let deviceData = {};
let voiceRecognition = null;
let isListening = false;
let useMLModel = false;
let speechModel = null;
let lightDevices = {}; 
let lightCounter = 1;
let globalBrightness = 50;
let wallStartPoint = null;
let isCreatingWall = false;
let wallCounter = 1;
let wallData = []; 

// –ö–∞—Ä—Ç–∞ –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥
const voiceColorMap = {
    '—á–µ—Ä–≤–æ–Ω–∏–π': '#ff4d4d',
    '–∑–µ–ª–µ–Ω–∏–π': '#52ff65',
    '—Å–∏–Ω—ñ–π': '#4d94ff',
    '–±—ñ–ª–∏–π': '#ffffff',
    '–∂–æ–≤—Ç–∏–π': '#ffeb3b',
    '–æ—Ä–∞–Ω–∂–µ–≤–∏–π': '#ffab4d',
    '—Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π': '#a45eff',
    '–±—ñ—Ä—é–∑–æ–≤–∏–π': '#4ecdc4'
};

const voiceCommands = {
    '—Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Ä–∫–µ—Ä': () => createMarkerAtCurrentPosition(),
    '–ø–æ–∫–∞–∑–∞—Ç–∏ –º–∞—Ä–∫–µ—Ä–∏': () => { markersVisible = true; toggleMarkers(); },
    '—Å—Ö–æ–≤–∞—Ç–∏ –º–∞—Ä–∫–µ—Ä–∏': () => { markersVisible = false; toggleMarkers(); },
    '–Ω–∞ –ø–æ—á–∞—Ç–æ–∫': () => resetPosition(),
    '–µ–∫—Å–ø–æ—Ä—Ç': () => exportData(),
    '—Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ—Ç–ª–æ': () => createLight(),
    '—É–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–≤—ñ—Ç–ª–æ': () => setAllLights(true),
    '–≤–∏–º–∫–Ω—É—Ç–∏ —Å–≤—ñ—Ç–ª–æ': () => setAllLights(false),
};

// --- –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø ---
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ Smart Home XR Tour –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI
    const initialHeight = document.getElementById('height-input').value;
    document.getElementById('current-height').textContent = initialHeight;
    updateWallCreationUI();
    setInterval(updatePositionDisplay, 200);
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
    document.querySelector('a-scene').addEventListener('enter-vr', () => {
        document.querySelector('a-scene').canvas.requestPointerLock();
    });
     document.querySelector('a-scene').addEventListener('click', () => {
        document.querySelector('a-scene').canvas.requestPointerLock?.();
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
    fetch('marker-light.json')
        .then(response => {
            if (response.ok) {
                console.log('üóÇÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª marker-light.json. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å—Ü–µ–Ω—É...');
                return response.json();
            } else {
                throw new Error('–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å—Ü–µ–Ω—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.');
            }
        })
        .then(data => {
            loadSceneFromData(data);
        })
        .catch(error => {
            console.warn(error.message);
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º, —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
            loadSceneFromData({ devices: defaultDevices });
        });
});


// --- –ì–û–õ–û–°–û–í–ï –ö–ï–†–£–í–ê–ù–ù–Ø ---
function initVoiceRecognition() {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        console.error('‚ùå Web Speech API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
        document.getElementById('voice-status-text').textContent = '–ì–æ–ª–æ—Å–æ–≤–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è';
        return false;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    voiceRecognition = new SpeechRecognition();
    
    voiceRecognition.continuous = true;
    voiceRecognition.interimResults = true;
    voiceRecognition.lang = 'uk-UA';
    voiceRecognition.maxAlternatives = 3;

    voiceRecognition.onstart = () => {
        console.log('üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ');
        document.getElementById('voice-indicator').classList.add('active');
        document.getElementById('voice-status-text').textContent = '–°–ª—É—Ö–∞—é...';
    };

    voiceRecognition.onresult = (event) => {
        let finalTranscript = '';
        let interimTranscript = '';
        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript.toLowerCase().trim();
            if (event.results[i].isFinal) {
                finalTranscript += transcript;
            } else {
                interimTranscript += transcript;
            }
        }
        if (interimTranscript) {
            document.getElementById('voice-transcript').innerHTML = `<em style="opacity: 0.7">${interimTranscript}</em>`;
        }
        if (finalTranscript) {
            document.getElementById('voice-transcript').innerHTML = `<strong>"${finalTranscript}"</strong>`;
            processVoiceCommand(finalTranscript);
            setTimeout(() => { document.getElementById('voice-transcript').innerHTML = ''; }, 3000);
        }
    };

    voiceRecognition.onerror = (event) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:', event.error);
        document.getElementById('voice-status-text').textContent = `–ü–æ–º–∏–ª–∫–∞: ${event.error}`;
    };

    voiceRecognition.onend = () => {
        console.log('üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        document.getElementById('voice-indicator').classList.remove('active');
        if (isListening) { // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫, —è–∫—â–æ –Ω–µ –±—É–ª–æ –∫–æ–º–∞–Ω–¥–∏ "—Å—Ç–æ–ø"
             voiceRecognition.start();
        }
    };
    return true;
}

function processVoiceCommand(command) {
    console.log('üéØ –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏:', command);
    
    const brightnessMatch = command.match(/—è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å\s*(\d+)/);
    if (brightnessMatch) {
        const brightness = Math.min(100, Math.max(0, parseInt(brightnessMatch[1])));
        updateBrightness(brightness);
        document.getElementById('voice-status-text').textContent = `–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å: ${brightness}%`;
        return;
    }
    
    for (const [colorName, colorValue] of Object.entries(voiceColorMap)) {
        if (command.includes(colorName)) {
            setAllLightsColor(colorValue);
            document.getElementById('voice-status-text').textContent = `–ö–æ–ª—ñ—Ä –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${colorName}`;
            return;
        }
    }
    
    if (command.includes('—Å—Ç–æ–ø') || command.includes('–∑—É–ø–∏–Ω–∏')) {
        stopVoiceRecognition();
        return;
    }

    for (const [key, action] of Object.entries(voiceCommands)) {
        if (command.includes(key)) {
            console.log('‚úÖ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É:', key);
            action();
            document.getElementById('voice-status-text').textContent = `–í–∏–∫–æ–Ω–∞–Ω–æ: ${key}`;
            return;
        }
    }
    
    document.getElementById('voice-status-text').textContent = '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞';
}

function toggleVoiceRecognition() {
    if (!voiceRecognition && !initVoiceRecognition()) return;
    if (isListening) {
        stopVoiceRecognition();
    } else {
        startVoiceRecognition();
    }
}

function startVoiceRecognition() {
    if (!voiceRecognition) return;
    isListening = true;
    voiceRecognition.start();
    updateVoiceButton();
}

function stopVoiceRecognition() {
    if (!voiceRecognition) return;
    isListening = false;
    voiceRecognition.stop();
    updateVoiceButton();
    document.getElementById('voice-status-text').textContent = '–ì–æ—Ç–æ–≤–æ –¥–æ —Ä–æ–±–æ—Ç–∏';
}

function updateVoiceButton() {
    const btn = document.getElementById('voice-btn');
    const btnText = document.getElementById('voice-btn-text');
    if (isListening) {
        btn.classList.add('active');
        btnText.textContent = '–ó—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è';
    } else {
        btn.classList.remove('active');
        btnText.textContent = '–ü–æ—á–∞—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è';
    }
}

function toggleMLMode() {
    useMLModel = !useMLModel;
    document.getElementById('ml-mode-text').textContent = useMLModel ? 'ML: –£–≤—ñ–º–∫' : 'ML: –í–∏–º–∫';
}

// --- –ö–ï–†–£–í–ê–ù–ù–Ø –ì–†–ê–í–¶–ï–ú ---

// –í–ò–ü–†–ê–í–õ–ï–ù–û: —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ–ø–µ—Ä –∫–æ—Ä–µ–∫—Ç–Ω–æ –ø—Ä–∞—Ü—é—î –∑ NavMesh
function setHeight() {
    const height = parseFloat(document.getElementById('height-input').value);
    const rig = document.getElementById('rig');
    const camera = document.getElementById('camera');

    if (rig && camera && !isNaN(height)) {
        // 1. –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä 'height' —É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ navmesh.
        rig.setAttribute('simple-navmesh-constraint', 'height', height);
        // 2. –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω—É –ø–æ–∑–∏—Ü—ñ—é –∫–∞–º–µ—Ä–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ 'rig'.
        camera.setAttribute('position', 'y', height);
        // 3. –û–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ.
        document.getElementById('current-height').textContent = height.toFixed(1);
        console.log(`–í–∏—Å–æ—Ç—É –≥—Ä–∞–≤—Ü—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${height}–º`);
    }
}

function changeHeight(direction) {
    const input = document.getElementById('height-input');
    let currentValue = parseFloat(input.value);
    input.value = (currentValue + direction).toFixed(1);
    setHeight();
}

// –í–ò–ü–†–ê–í–õ–ï–ù–û: —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤–∏—Å–æ—Ç—É
function resetPosition() {
    const rig = document.getElementById('rig');
    rig.setAttribute('position', '0 6 10');
}


// --- –ö–ï–†–£–í–ê–ù–ù–Ø –û–ë'–Ñ–ö–¢–ê–ú–ò ---
const defaultDevices = {
    'marker-0-0-0': { name: '–†–æ–∑—É–º–Ω–∏–π —Ö–∞–±', type: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä', description: '–û—Å–Ω–æ–≤–Ω–∏–π —Ö–∞–± –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤—Å—ñ–º–∞ IoT –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏ –≤ –∫–≤–∞—Ä—Ç–∏—Ä—ñ', position: {x: 0, y: 0, z: 0}, mlFeatures: ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ ML –º–æ–¥–µ–ª–µ–π', '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è Edge –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤'] }
};

function createMarkerFromData(markerId, device) {
    if (document.getElementById(markerId)) return; 
    const container = document.createElement('a-entity');
    container.setAttribute('id', markerId);
    container.setAttribute('position', device.position);
    
    const marker = document.createElement('a-sphere');
    marker.setAttribute('class', 'iot-marker'); // –í–∞–∂–ª–∏–≤–∏–π –∫–ª–∞—Å –¥–ª—è raycaster
    marker.setAttribute('radius', '0.5');
    marker.setAttribute('color', '#00ff88');
    marker.setAttribute('event-set__enter', '_event: mouseenter; scale: 1.2 1.2 1.2');
    marker.setAttribute('event-set__leave', '_event: mouseleave; scale: 1 1 1');
    marker.addEventListener('click', () => showIotInfo(markerId));
    
    const text = document.createElement('a-text');
    text.setAttribute('value', device.name);
    text.setAttribute('position', '0 1 0');
    text.setAttribute('width', '4');
    text.setAttribute('align', 'center');
    
    container.appendChild(marker);
    container.appendChild(text);
    document.querySelector('a-scene').appendChild(container);
}

function showIotInfo(markerId) {
    const device = deviceData[markerId];
    const panel = document.getElementById('iot-info-panel');
    if (device && panel) {
        document.getElementById('iot-title').textContent = device.name;
        document.getElementById('iot-type').textContent = device.type;
        document.getElementById('iot-description').textContent = device.description;
        document.getElementById('iot-coords').textContent = `X: ${device.position.x.toFixed(1)}, Y: ${device.position.y.toFixed(1)}, Z: ${device.position.z.toFixed(1)}`;
        document.getElementById('iot-ml-models').textContent = (device.mlModels && device.mlModels.length > 0) ? device.mlModels.join(', ') : '–ù–µ–º–∞—î';
        document.getElementById('iot-ml-features').textContent = (device.mlFeatures && device.mlFeatures.length > 0) ? device.mlFeatures.join(', ') : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó';
        panel.classList.add('active');
    }
}

function closeIotPanel() {
    document.getElementById('iot-info-panel').classList.remove('active');
}

function toggleMarkers() {
    markersVisible = !markersVisible;
    document.querySelectorAll('.iot-marker, a-text[value]').forEach(m => m.setAttribute('visible', markersVisible));
}


// --- –Ü–ú–ü–û–†–¢/–ï–ö–°–ü–û–†–¢ ---
function loadSceneFromData(importObject) {
    // –û—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
    Object.keys(deviceData).forEach(id => { if (!defaultDevices[id]) document.getElementById(id)?.remove(); });
    Object.keys(lightDevices).forEach(id => document.getElementById(id)?.remove());
    
    deviceData = { ...defaultDevices, ...(importObject.devices || {}) };
    lightDevices = {};

    markerCounter = importObject.markerCounter || Object.keys(deviceData).length;
    lightCounter = importObject.lightCounter || 1;
    
    if (importObject.globalBrightness !== undefined) {
        updateBrightness(importObject.globalBrightness);
    }

    // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤
    Object.entries(deviceData).forEach(([id, data]) => {
        if (!defaultDevices[id]) createMarkerFromData(id, data);
    });
     Object.entries(importObject.lights || {}).forEach(([id, data]) => createLightFromData(id, data));

    console.log('‚úÖ –°—Ü–µ–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –¥–∞–Ω–∏—Ö!');
}

function importData(event) {
    const file = event.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = (e) => {
        try {
            const importObject = JSON.parse(e.target.result);
            loadSceneFromData(importObject);
            alert('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É.');
        }
    };
    reader.readAsText(file);
    event.target.value = '';
}

// --- –£–¢–ò–õ–Ü–¢–ò ---
function updatePositionDisplay() {
    const pos = document.getElementById('camera')?.object3D.getWorldPosition(new THREE.Vector3());
    if (pos) {
        document.getElementById('pos-x').textContent = pos.x.toFixed(1);
        document.getElementById('pos-y').textContent = pos.y.toFixed(1);
        document.getElementById('pos-z').textContent = pos.z.toFixed(1);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–ª–∏–∫—É –∑ HTML
Object.assign(window, {
    changeHeight, setHeight, createMarkerAtCurrentPosition: () => {}, saveMarker: () => {}, cancelMarker: () => {},
    resetPosition, toggleMarkers, showIotInfo, closeIotPanel, exportData, importData,
    toggleVoiceRecognition, toggleMLMode, createLight: () => {}, toggleAllLights: () => {}, updateBrightness: () => {},
    toggleLightDevice: () => {}, startWallCreation: () => {}, createWall: () => {}, cancelWallCreation: () => {}, setAllLightsColor: () => {}
});

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let markersVisible = true;
let tempMarkerPosition = null;
let markerCounter = 1;
let deviceData = {};
let voiceRecognition = null;
let isListening = false;
let useMLModel = false;
let speechModel = null;

// –ì–æ–ª–æ—Å–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
const voiceCommands = {
    '—Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Ä–∫–µ—Ä': () => createMarkerAtCurrentPosition(),
    '—Å—Ç–≤–æ—Ä–∏ –º–∞—Ä–∫–µ—Ä': () => createMarkerAtCurrentPosition(),
    '–¥–æ–¥–∞—Ç–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π': () => createMarkerAtCurrentPosition(),
    '–ø–æ–∫–∞–∑–∞—Ç–∏ –º–∞—Ä–∫–µ—Ä–∏': () => { markersVisible = true; toggleMarkers(); },
    '–ø–æ–∫–∞–∂–∏ –º–∞—Ä–∫–µ—Ä–∏': () => { markersVisible = true; toggleMarkers(); },
    '—Å—Ö–æ–≤–∞—Ç–∏ –º–∞—Ä–∫–µ—Ä–∏': () => { markersVisible = false; toggleMarkers(); },
    '—Å—Ö–æ–≤–∞–π –º–∞—Ä–∫–µ—Ä–∏': () => { markersVisible = false; toggleMarkers(); },
    '–Ω–∞ –ø–æ—á–∞—Ç–æ–∫': () => resetPosition(),
    '–¥–æ–¥–æ–º—É': () => resetPosition(),
    '—Å–∫–∏–Ω—É—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é': () => resetPosition(),
    '–µ–∫—Å–ø–æ—Ä—Ç': () => exportMarkers(),
    '–µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏': () => exportMarkers(),
    '–∑–±–µ—Ä–µ–≥—Ç–∏ –º–∞—Ä–∫–µ—Ä–∏': () => exportMarkers(),
    '–∫–∞–º–µ—Ä–∞ –≤–≥–æ—Ä—É': () => changeHeight(5),
    '–∫–∞–º–µ—Ä–∞ –≤–Ω–∏–∑': () => changeHeight(-5),
    '–≤–∏—â–µ': () => changeHeight(3),
    '–Ω–∏–∂—á–µ': () => changeHeight(-3),
    '—Å—Ç–æ–ø': () => stopVoiceRecognition(),
    '–∑—É–ø–∏–Ω–∏—Ç–∏': () => stopVoiceRecognition()
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Web Speech API
function initVoiceRecognition() {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        console.error('‚ùå Web Speech API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
        document.getElementById('voice-status-text').textContent = '–ì–æ–ª–æ—Å–æ–≤–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è';
        return false;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    voiceRecognition = new SpeechRecognition();
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    voiceRecognition.continuous = true;
    voiceRecognition.interimResults = true;
    voiceRecognition.lang = 'uk-UA'; // –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
    voiceRecognition.maxAlternatives = 3;

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    voiceRecognition.onstart = () => {
        console.log('üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ');
        document.getElementById('voice-indicator').classList.add('active');
        document.getElementById('voice-status-text').textContent = '–°–ª—É—Ö–∞—é...';
    };

    voiceRecognition.onresult = (event) => {
        let finalTranscript = '';
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript.toLowerCase();
            
            if (event.results[i].isFinal) {
                finalTranscript += transcript;
            } else {
                interimTranscript += transcript;
            }
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø—Ä–æ–º—ñ–∂–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (interimTranscript) {
            document.getElementById('voice-transcript').innerHTML = 
                `<em style="opacity: 0.7">${interimTranscript}</em>`;
        }

        // –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (finalTranscript) {
            document.getElementById('voice-transcript').innerHTML = 
                `<strong>"${finalTranscript}"</strong>`;
            
            processVoiceCommand(finalTranscript);
            
            // –û—á–∏—â–∞—î–º–æ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
            setTimeout(() => {
                document.getElementById('voice-transcript').innerHTML = '';
            }, 3000);
        }
    };

    voiceRecognition.onerror = (event) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:', event.error);
        document.getElementById('voice-status-text').textContent = `–ü–æ–º–∏–ª–∫–∞: ${event.error}`;
        
        if (event.error === 'no-speech') {
            document.getElementById('voice-status-text').textContent = '–ù–µ —á—É—é –º–æ–≤–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑';
        }
    };

    voiceRecognition.onend = () => {
        console.log('üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        document.getElementById('voice-indicator').classList.remove('active');
        isListening = false;
        updateVoiceButton();
    };

    return true;
}

// –û–±—Ä–æ–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏
function processVoiceCommand(command) {
    console.log('üéØ –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏:', command);
    
    // –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É
    for (const [key, action] of Object.entries(voiceCommands)) {
        if (command.includes(key)) {
            console.log('‚úÖ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É:', key);
            action();
            
            // –í—ñ–∑—É–∞–ª—å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫
            document.getElementById('voice-status-text').textContent = `–í–∏–∫–æ–Ω–∞–Ω–æ: ${key}`;
            return;
        }
    }
    
    // –Ø–∫—â–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞
    document.getElementById('voice-status-text').textContent = '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞';
    console.log('‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞:', command);
}

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
function toggleVoiceRecognition() {
    if (!voiceRecognition && !initVoiceRecognition()) {
        return;
    }

    if (isListening) {
        stopVoiceRecognition();
    } else {
        startVoiceRecognition();
    }
}

function startVoiceRecognition() {
    if (!voiceRecognition) return;
    
    voiceRecognition.start();
    isListening = true;
    updateVoiceButton();
    console.log('üé§ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏');
}

function stopVoiceRecognition() {
    if (!voiceRecognition) return;
    
    voiceRecognition.stop();
    isListening = false;
    updateVoiceButton();
    document.getElementById('voice-transcript').innerHTML = '';
    document.getElementById('voice-status-text').textContent = '–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ';
}

function updateVoiceButton() {
    const btn = document.getElementById('voice-btn');
    const btnText = document.getElementById('voice-btn-text');
    
    if (isListening) {
        btn.classList.add('active');
        btnText.textContent = '–ó—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è';
    } else {
        btn.classList.remove('active');
        btnText.textContent = '–ü–æ—á–∞—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è';
    }
}

// ML —Ä–µ–∂–∏–º –∑ TensorFlow.js
async function initMLModel() {
    try {
        const recognizer = speechCommands.create('BROWSER_FFT');
        await recognizer.ensureModelLoaded();
        
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–ª–∞—Å–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
        const words = recognizer.wordLabels();
        console.log('üìö –î–æ—Å—Ç—É–ø–Ω—ñ ML –∫–æ–º–∞–Ω–¥–∏:', words);
        
        speechModel = recognizer;
        document.getElementById('voice-status-text').textContent = 'ML –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞';
        
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ML –º–æ–¥–µ–ª—ñ:', error);
        return false;
    }
}

function toggleMLMode() {
    useMLModel = !useMLModel;
    document.getElementById('ml-mode-text').textContent = useMLModel ? 'ML: –£–≤—ñ–º–∫' : 'ML: –í–∏–º–∫';
    
    if (useMLModel && !speechModel) {
        initMLModel();
    }
    
    console.log('ü§ñ ML —Ä–µ–∂–∏–º:', useMLModel ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ');
}

// Edge ML –æ–±—Ä–æ–±–∫–∞ –∞—É–¥—ñ–æ
async function processAudioWithML(audioData) {
    if (!speechModel || !useMLModel) return;
    
    try {
        const scores = await speechModel.recognize(audioData);
        const labels = speechModel.wordLabels();
        
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–º–∞–Ω–¥—É –∑ –Ω–∞–π–≤–∏—â–∏–º —Å–∫–æ—Ä–æ–º
        const maxScore = Math.max(...scores);
        const maxIndex = scores.indexOf(maxScore);
        const command = labels[maxIndex];
        
        if (maxScore > 0.75) { // –ü–æ—Ä—ñ–≥ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ
            console.log('ü§ñ ML —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ:', command, '–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å:', maxScore);
            processVoiceCommand(command);
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ ML –æ–±—Ä–æ–±–∫–∏:', error);
    }
}

// IoT –ø—Ä–∏—Å—Ç—Ä–æ—ó –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
const defaultDevices = {
    'marker-0-0-0': {
        name: '–†–æ–∑—É–º–Ω–∏–π —Ö–∞–±',
        type: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä',
        description: '–û—Å–Ω–æ–≤–Ω–∏–π —Ö–∞–± –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤—Å—ñ–º–∞ IoT –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏ –≤ –∫–≤–∞—Ä—Ç–∏—Ä—ñ',
        position: {x: 0, y: 0, z: 0},
        mlFeatures: ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ ML –º–æ–¥–µ–ª–µ–π', '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è Edge –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤']
    }
};

// –¢–∏–ø–∏ Edge ML –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
const edgeMLTypes = {
    vision: {
        name: '–ö–∞–º–µ—Ä–∞ –∑ Computer Vision',
        color: '#ff6b6b',
        mlModels: ['MobileNet', 'TinyYOLO', 'FaceNet'],
        features: ['–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ª—é–¥–µ–π', '–î–µ—Ç–µ–∫—Ü—ñ—è –∂–µ—Å—Ç—ñ–≤', '–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ–±\'—î–∫—Ç—ñ–≤']
    },
    audio: {
        name: '–ê—É–¥—ñ–æ –ø—Ä–æ—Ü–µ—Å–æ—Ä',
        color: '#4ecdc4',
        mlModels: ['TensorFlow Lite Audio', 'YAMNet'],
        features: ['–ì–æ–ª–æ—Å–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏', '–î–µ—Ç–µ–∫—Ü—ñ—è –∞–Ω–æ–º–∞–ª—å–Ω–∏—Ö –∑–≤—É–∫—ñ–≤', '–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏']
    },
    sensor: {
        name: '–°–µ–Ω—Å–æ—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä',
        color: '#45b7d1',
        mlModels: ['LSTM', 'Autoencoder'],
        features: ['–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è', '–î–µ—Ç–µ–∫—Ü—ñ—è –∞–Ω–æ–º–∞–ª—ñ–π', '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è']
    },
    motion: {
        name: '–î–µ—Ç–µ–∫—Ç–æ—Ä —Ä—É—Ö—É –∑ ML',
        color: '#96ceb4',
        mlModels: ['Pose Detection', 'Activity Recognition'],
        features: ['–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ', '–î–µ—Ç–µ–∫—Ü—ñ—è –ø–∞–¥—ñ–Ω–Ω—è', '–ê–Ω–∞–ª—ñ–∑ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏']
    },
    climate: {
        name: '–ö–ª—ñ–º–∞—Ç –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∑ ML',
        color: '#dda0dd',
        mlModels: ['Time Series Forecasting', 'Regression Models'],
        features: ['–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏', '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –µ–Ω–µ—Ä–≥—ñ—ó', '–ê–¥–∞–ø—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è']
    }
};

// –ö–æ–ø—ñ—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó –≤ —Ä–æ–±–æ—á—ñ –¥–∞–Ω—ñ
deviceData = {...defaultDevices};

// –§—É–Ω–∫—Ü—ñ—ó –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∏—Å–æ—Ç–æ—é
function changeHeight(direction) {
    const input = document.getElementById('height-input');
    const currentValue = parseInt(input.value);
    const newValue = Math.max(0, Math.min(50, currentValue + direction));
    input.value = newValue;
    setHeight();
}

function setHeight() {
    const height = document.getElementById('height-input').value;
    const rig = document.getElementById('rig');
    const currentPos = rig.getAttribute('position');
    rig.setAttribute('position', `${currentPos.x} ${height} ${currentPos.z}`);
    document.getElementById('current-height').textContent = height;
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞
function createMarkerAtCurrentPosition() {
    const camera = document.getElementById('camera');
    const pos = camera.object3D.getWorldPosition(new THREE.Vector3());
    
    tempMarkerPosition = {
        x: Math.round(pos.x * 100) / 100,
        y: Math.round(pos.y * 100) / 100,
        z: Math.round(pos.z * 100) / 100
    };
    
    document.getElementById('marker-form').style.display = 'block';
    console.log(`üìç –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó: x=${tempMarkerPosition.x}, y=${tempMarkerPosition.y}, z=${tempMarkerPosition.z}`);
}

function saveMarker() {
    const name = document.getElementById('marker-name').value || `IoT –ü—Ä–∏—Å—Ç—Ä—ñ–π ${markerCounter}`;
    const description = document.getElementById('marker-description').value || '–†–æ–∑—É–º–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π';
    const mlType = document.getElementById('ml-device-type').value;
    
    const markerId = `marker-${markerCounter}`;
    const container = document.createElement('a-entity');
    container.setAttribute('id', markerId);
    container.setAttribute('position', `${tempMarkerPosition.x} ${tempMarkerPosition.y} ${tempMarkerPosition.z}`);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä —Ç–∞ —Ç–∏–ø –Ω–∞ –æ—Å–Ω–æ–≤—ñ ML —Ç–∏–ø—É
    let markerColor = '#00ff88';
    let deviceType = 'IoT –ü—Ä–∏—Å—Ç—Ä—ñ–π';
    let mlModels = [];
    let mlFeatures = [];
    
    if (mlType && edgeMLTypes[mlType]) {
        const mlDevice = edgeMLTypes[mlType];
        markerColor = mlDevice.color;
        deviceType = mlDevice.name;
        mlModels = mlDevice.mlModels;
        mlFeatures = mlDevice.features;
    }
    
    // –°—Ñ–µ—Ä–∞ –º–∞—Ä–∫–µ—Ä–∞
    const marker = document.createElement('a-sphere');
    marker.setAttribute('class', 'iot-marker');
    marker.setAttribute('radius', '0.5');
    marker.setAttribute('color', markerColor);
    marker.setAttribute('opacity', '0.7');
    marker.setAttribute('event-set__enter', '_event: mouseenter; scale: 1.2 1.2 1.2; opacity: 0.9');
    marker.setAttribute('event-set__leave', '_event: mouseleave; scale: 1 1 1; opacity: 0.7');
    marker.setAttribute('animation', 'property: rotation; to: 0 360 0; loop: true; dur: 15000');
    
    // –î–æ–¥–∞—î–º–æ –µ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü—ñ—ó –¥–ª—è ML –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    if (mlType) {
        marker.setAttribute('animation__pulse', 'property: scale; from: 1 1 1; to: 1.1 1.1 1.1; loop: true; dir: alternate; dur: 2000');
    }
    
    // –¢–µ–∫—Å—Ç –Ω–∞–¥ –º–∞—Ä–∫–µ—Ä–æ–º
    const text = document.createElement('a-text');
    text.setAttribute('value', name);
    text.setAttribute('position', '0 1 0');
    text.setAttribute('width', '4');
    text.setAttribute('align', 'center');
    text.setAttribute('color', '#fff');
    
    // –î–æ–¥–∞—î–º–æ —ñ–∫–æ–Ω–∫—É ML —è–∫—â–æ —Ü–µ ML –ø—Ä–∏—Å—Ç—Ä—ñ–π
    if (mlType) {
        const mlIcon = document.createElement('a-text');
        mlIcon.setAttribute('value', 'ü§ñ');
        mlIcon.setAttribute('position', '0 1.5 0');
        mlIcon.setAttribute('width', '6');
        mlIcon.setAttribute('align', 'center');
        container.appendChild(mlIcon);
    }
    
    container.appendChild(marker);
    container.appendChild(text);
    document.querySelector('a-scene').appendChild(container);
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π
    deviceData[markerId] = {
        name: name,
        type: deviceType,
        description: description,
        position: tempMarkerPosition,
        mlType: mlType,
        mlModels: mlModels,
        mlFeatures: mlFeatures
    };
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
    marker.addEventListener('click', function() {
        showIotInfo(markerId);
    });
    
    markerCounter++;
    cancelMarker();
    
    console.log(`‚úÖ ${mlType ? 'ML ' : ''}–ú–∞—Ä–∫–µ—Ä "${name}" —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó:`, tempMarkerPosition);
}

function cancelMarker() {
    document.getElementById('marker-form').style.display = 'none';
    document.getElementById('marker-name').value = '';
    document.getElementById('marker-description').value = '';
    document.getElementById('ml-device-type').value = '';
    tempMarkerPosition = null;
}

// –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ IoT
function showIotInfo(markerId) {
    const device = deviceData[markerId];
    if (device) {
        document.getElementById('iot-title').textContent = device.name;
        document.getElementById('iot-type').textContent = device.type;
        document.getElementById('iot-description').textContent = device.description;
        document.getElementById('iot-coords').textContent = `X: ${device.position.x}, Y: ${device.position.y}, Z: ${device.position.z}`;
        
        // ML —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        if (device.mlModels && device.mlModels.length > 0) {
            document.getElementById('iot-ml-models').textContent = device.mlModels.join(', ');
            document.getElementById('iot-ml-features').textContent = device.mlFeatures.join(', ');
        } else {
            document.getElementById('iot-ml-models').textContent = '–ù–µ–º–∞—î';
            document.getElementById('iot-ml-features').textContent = '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó';
        }
        
        document.getElementById('iot-info-panel').classList.add('active');
    }
}

function closeIotPanel() {
    document.getElementById('iot-info-panel').classList.remove('active');
}

// –ï–∫—Å–ø–æ—Ä—Ç –º–∞—Ä–∫–µ—Ä—ñ–≤
function exportMarkers() {
    const exportData = {
        version: '1.0',
        exportDate: new Date().toISOString(),
        devices: deviceData,
        markerCounter: markerCounter
    };
    
    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(dataBlob);
    link.download = `smart-home-iot-markers-${Date.now()}.json`;
    link.click();
    
    console.log('‚úÖ –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ', Object.keys(deviceData).length, '–º–∞—Ä–∫–µ—Ä—ñ–≤');
}

// –Ü–º–ø–æ—Ä—Ç –º–∞—Ä–∫–µ—Ä—ñ–≤
function importMarkers(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const importData = JSON.parse(e.target.result);
            
            // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —ñ—Å–Ω—É—é—á—ñ –º–∞—Ä–∫–µ—Ä–∏ (–∫—Ä—ñ–º –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö)
            Object.keys(deviceData).forEach(markerId => {
                if (!defaultDevices[markerId]) {
                    const element = document.getElementById(markerId);
                    if (element) element.remove();
                }
            });
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ
            deviceData = {...importData.devices};
            markerCounter = importData.markerCounter || Object.keys(deviceData).length;
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Ä–∫–µ—Ä–∏ –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
            Object.entries(deviceData).forEach(([markerId, device]) => {
                if (!defaultDevices[markerId]) {
                    createMarkerFromData(markerId, device);
                }
            });
            
            console.log('‚úÖ –Ü–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ', Object.keys(deviceData).length, '–º–∞—Ä–∫–µ—Ä—ñ–≤');
            alert('–ú–∞—Ä–∫–µ—Ä–∏ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!');
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É.');
        }
    };
    reader.readAsText(file);
    
    // –û—á–∏—â–∞—î–º–æ input –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É —Ç–æ–≥–æ –∂ —Ñ–∞–π–ª—É
    event.target.value = '';
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä–∞ –∑ –¥–∞–Ω–∏—Ö
function createMarkerFromData(markerId, device) {
    const container = document.createElement('a-entity');
    container.setAttribute('id', markerId);
    container.setAttribute('position', `${device.position.x} ${device.position.y} ${device.position.z}`);
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–ª—ñ—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ ML —Ç–∏–ø—É
    let markerColor = '#00ff88';
    if (device.mlType && edgeMLTypes[device.mlType]) {
        markerColor = edgeMLTypes[device.mlType].color;
    }
    
    // –°—Ñ–µ—Ä–∞ –º–∞—Ä–∫–µ—Ä–∞
    const marker = document.createElement('a-sphere');
    marker.setAttribute('class', 'iot-marker');
    marker.setAttribute('radius', '0.5');
    marker.setAttribute('color', markerColor);
    marker.setAttribute('opacity', '0.7');
    marker.setAttribute('event-set__enter', '_event: mouseenter; scale: 1.2 1.2 1.2; opacity: 0.9');
    marker.setAttribute('event-set__leave', '_event: mouseleave; scale: 1 1 1; opacity: 0.7');
    marker.setAttribute('animation', 'property: rotation; to: 0 360 0; loop: true; dur: 15000');
    
    // –î–æ–¥–∞—î–º–æ –µ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü—ñ—ó –¥–ª—è ML –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
    if (device.mlType) {
        marker.setAttribute('animation__pulse', 'property: scale; from: 1 1 1; to: 1.1 1.1 1.1; loop: true; dir: alternate; dur: 2000');
    }
    
    // –¢–µ–∫—Å—Ç –Ω–∞–¥ –º–∞—Ä–∫–µ—Ä–æ–º
    const text = document.createElement('a-text');
    text.setAttribute('value', device.name);
    text.setAttribute('position', '0 1 0');
    text.setAttribute('width', '4');
    text.setAttribute('align', 'center');
    text.setAttribute('color', '#fff');
    
    // –î–æ–¥–∞—î–º–æ —ñ–∫–æ–Ω–∫—É ML —è–∫—â–æ —Ü–µ ML –ø—Ä–∏—Å—Ç—Ä—ñ–π
    if (device.mlType) {
        const mlIcon = document.createElement('a-text');
        mlIcon.setAttribute('value', 'ü§ñ');
        mlIcon.setAttribute('position', '0 1.5 0');
        mlIcon.setAttribute('width', '6');
        mlIcon.setAttribute('align', 'center');
        container.appendChild(mlIcon);
    }
    
    container.appendChild(marker);
    container.appendChild(text);
    document.querySelector('a-scene').appendChild(container);
    
    // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
    marker.addEventListener('click', function() {
        showIotInfo(markerId);
    });
}

// –®–≤–∏–¥–∫—ñ –¥—ñ—ó
function resetPosition() {
    document.getElementById('rig').setAttribute('position', '0 10 20');
    document.getElementById('height-input').value = 10;
    document.getElementById('current-height').textContent = 10;
}

function toggleMarkers() {
    markersVisible = !markersVisible;
    const markers = document.querySelectorAll('.iot-marker');
    markers.forEach(marker => {
        marker.setAttribute('visible', markersVisible);
    });
}

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó
function updatePositionDisplay() {
    const camera = document.getElementById('camera');
    const pos = camera.object3D.getWorldPosition(new THREE.Vector3());
    document.getElementById('pos-x').textContent = pos.x.toFixed(1);
    document.getElementById('pos-y').textContent = pos.y.toFixed(1);
    document.getElementById('pos-z').textContent = pos.z.toFixed(1);
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ Smart Home XR Tour –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    setHeight();
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∫–æ–∂–Ω—ñ 100–º—Å
    setInterval(updatePositionDisplay, 100);
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
    const initialMarker = document.querySelector('#marker-0-0-0 .iot-marker');
    if (initialMarker) {
        initialMarker.addEventListener('click', function() {
            showIotInfo('marker-0-0-0');
        });
    }
    
    // –û–±—Ä–æ–±–∫–∞ –∫–ª–∞–≤—ñ—à
    document.addEventListener('keydown', (e) => {
        switch(e.key.toLowerCase()) {
            case 'q':
                changeHeight(1);
                break;
            case 'e':
                changeHeight(-1);
                break;
            case 'r':
                resetPosition();
                break;
            case 'm':
                createMarkerAtCurrentPosition();
                break;
            case 'h':
                toggleMarkers();
                break;
            case 'v':
                toggleVoiceRecognition();
                break;
        }
    });
    
    // Pointer lock
    document.addEventListener('click', () => {
        const canvas = document.querySelector('a-scene canvas');
        if (canvas && !document.pointerLockElement) {
            canvas.requestPointerLock();
        }
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
window.changeHeight = changeHeight;
window.setHeight = setHeight;
window.createMarkerAtCurrentPosition = createMarkerAtCurrentPosition;
window.saveMarker = saveMarker;
window.cancelMarker = cancelMarker;
window.resetPosition = resetPosition;
window.toggleMarkers = toggleMarkers;
window.showIotInfo = showIotInfo;
window.closeIotPanel = closeIotPanel;
window.exportMarkers = exportMarkers;
window.importMarkers = importMarkers;
window.toggleVoiceRecognition = toggleVoiceRecognition;
window.toggleMLMode = toggleMLMode;
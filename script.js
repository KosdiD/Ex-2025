// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let markersVisible = true;
let tempMarkerPosition = null;
let markerCounter = 1;
let deviceData = {};
let voiceRecognition = null;
let isListening = false;
let useMLModel = false;
let speechModel = null;
let lightDevices = {}; // –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–≤—ñ—Ç–ª–æ–≤–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
let lightCounter = 1;
let globalBrightness = 50;

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—ñ–Ω
let wallStartPoint = null;
let isCreatingWall = false;
let wallCounter = 1;
let wallData = []; // –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ —Å—Ç—ñ–Ω–∏

// –ù–û–í–ï: –ö–∞—Ä—Ç–∞ –∫–æ–ª—å–æ—Ä—ñ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∏—Ö –∫–æ–º–∞–Ω–¥
const voiceColorMap = {
    '—á–µ—Ä–≤–æ–Ω–∏–π': '#ff4d4d',
    '–∑–µ–ª–µ–Ω–∏–π': '#52ff65',
    '—Å–∏–Ω—ñ–π': '#4d94ff',
    '–±—ñ–ª–∏–π': '#ffffff',
    '–∂–æ–≤—Ç–∏–π': '#ffeb3b',
    '–æ—Ä–∞–Ω–∂–µ–≤–∏–π': '#ffab4d',
    '—Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π': '#a45eff',
    '–±—ñ—Ä—é–∑–æ–≤–∏–π': '#4ecdc4'
};

// –ì–æ–ª–æ—Å–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏
const voiceCommands = {
    '—Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Ä–∫–µ—Ä': () => createMarkerAtCurrentPosition(),
    '—Å—Ç–≤–æ—Ä–∏ –º–∞—Ä–∫–µ—Ä': () => createMarkerAtCurrentPosition(),
    '–¥–æ–¥–∞—Ç–∏ –ø—Ä–∏—Å—Ç—Ä—ñ–π': () => createMarkerAtCurrentPosition(),
    '–ø–æ–∫–∞–∑–∞—Ç–∏ –º–∞—Ä–∫–µ—Ä–∏': () => { markersVisible = true; toggleMarkers(); },
    '–ø–æ–∫–∞–∂–∏ –º–∞—Ä–∫–µ—Ä–∏': () => { markersVisible = true; toggleMarkers(); },
    '—Å—Ö–æ–≤–∞—Ç–∏ –º–∞—Ä–∫–µ—Ä–∏': () => { markersVisible = false; toggleMarkers(); },
    '—Å—Ö–æ–≤–∞–π –º–∞—Ä–∫–µ—Ä–∏': () => { markersVisible = false; toggleMarkers(); },
    '–Ω–∞ –ø–æ—á–∞—Ç–æ–∫': () => resetPosition(),
    '–¥–æ–¥–æ–º—É': () => resetPosition(),
    '—Å–∫–∏–Ω—É—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é': () => resetPosition(),
    '–µ–∫—Å–ø–æ—Ä—Ç': () => exportData(),
    '–µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏': () => exportData(),
    '–∑–±–µ—Ä–µ–≥—Ç–∏ –º–∞—Ä–∫–µ—Ä–∏': () => exportData(),
    '–∫–∞–º–µ—Ä–∞ –≤–≥–æ—Ä—É': () => changeHeight(5),
    '–∫–∞–º–µ—Ä–∞ –≤–Ω–∏–∑': () => changeHeight(-5),
    '–≤–∏—â–µ': () => changeHeight(3),
    '–Ω–∏–∂—á–µ': () => changeHeight(-3),
    '—Å—Ç–æ–ø': () => stopVoiceRecognition(),
    '–∑—É–ø–∏–Ω–∏—Ç–∏': () => stopVoiceRecognition(),
    '—Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ—Ç–ª–æ': () => createLight(),
    '–¥–æ–¥–∞—Ç–∏ —Å–≤—ñ—Ç–ª–æ': () => createLight(),
    '–≤–∏–º–∫–Ω—É—Ç–∏ —Å–≤—ñ—Ç–ª–æ': () => setAllLights(false),
    '–≤–∏–º–∫–Ω–∏ —Å–≤—ñ—Ç–ª–æ': () => setAllLights(false),
    '—É–≤—ñ–º–∫–Ω—É—Ç–∏ —Å–≤—ñ—Ç–ª–æ': () => setAllLights(true),
    '—É–≤—ñ–º–∫–Ω–∏ —Å–≤—ñ—Ç–ª–æ': () => setAllLights(true),
    '–≤–∏–º–∫–Ω—É—Ç–∏ –≤—Å–µ': () => setAllLights(false),
    '—É–≤—ñ–º–∫–Ω—É—Ç–∏ –≤—Å–µ': () => setAllLights(true),
    '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å': () => updateBrightness(100),
    '–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å': () => updateBrightness(0),
    '—Å–µ—Ä–µ–¥–Ω—è —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å': () => updateBrightness(50)
};

// ... (–í–µ—Å—å –∫–æ–¥ –¥–ª—è Voice Recognition, ML, IoT –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è —Ç—É—Ç –±–µ–∑ –∑–º—ñ–Ω) ...
// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Web Speech API
function initVoiceRecognition() {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
        console.error('‚ùå Web Speech API –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ —Ü—å–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ');
        document.getElementById('voice-status-text').textContent = '–ì–æ–ª–æ—Å–æ–≤–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è';
        return false;
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    voiceRecognition = new SpeechRecognition();
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    voiceRecognition.continuous = true;
    voiceRecognition.interimResults = true;
    voiceRecognition.lang = 'uk-UA'; // –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
    voiceRecognition.maxAlternatives = 3;

    // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    voiceRecognition.onstart = () => {
        console.log('üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ä–æ–∑–ø–æ—á–∞—Ç–æ');
        document.getElementById('voice-indicator').classList.add('active');
        document.getElementById('voice-status-text').textContent = '–°–ª—É—Ö–∞—é...';
    };

    voiceRecognition.onresult = (event) => {
        let finalTranscript = '';
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
            const transcript = event.results[i][0].transcript.toLowerCase();
            
            if (event.results[i].isFinal) {
                finalTranscript += transcript;
            } else {
                interimTranscript += transcript;
            }
        }

        if (interimTranscript) {
            document.getElementById('voice-transcript').innerHTML = 
                `<em style="opacity: 0.7">${interimTranscript}</em>`;
        }

        if (finalTranscript) {
            document.getElementById('voice-transcript').innerHTML = 
                `<strong>"${finalTranscript}"</strong>`;
            
            processVoiceCommand(finalTranscript);
            
            setTimeout(() => {
                document.getElementById('voice-transcript').innerHTML = '';
            }, 3000);
        }
    };

    voiceRecognition.onerror = (event) => {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:', event.error);
        document.getElementById('voice-status-text').textContent = `–ü–æ–º–∏–ª–∫–∞: ${event.error}`;
        
        if (event.error === 'no-speech') {
            document.getElementById('voice-status-text').textContent = '–ù–µ —á—É—é –º–æ–≤–∏, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑';
        }
    };

    voiceRecognition.onend = () => {
        console.log('üé§ –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        document.getElementById('voice-indicator').classList.remove('active');
        isListening = false;
        updateVoiceButton();
    };

    return true;
}
// –û–ù–û–í–õ–ï–ù–û: –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É
function processVoiceCommand(command) {
    console.log('üéØ –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏:', command);

    // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–º—ñ–Ω—É —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ
    const brightnessMatch = command.match(/—è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å\s*(\d+)/);
    if (brightnessMatch) {
        const brightness = Math.min(100, Math.max(0, parseInt(brightnessMatch[1])));
        updateBrightness(brightness);
        document.getElementById('voice-status-text').textContent = `–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${brightness}%`;
        return;
    }
    
    // 2. –ù–û–í–ï: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–º—ñ–Ω—É –∫–æ–ª—å–æ—Ä—É
    for (const [colorName, colorValue] of Object.entries(voiceColorMap)) {
        if (command.includes(colorName)) {
            setAllLightsColor(colorValue);
            document.getElementById('voice-status-text').textContent = `–ö–æ–ª—ñ—Ä –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ ${colorName}`;
            return;
        }
    }

    // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏
    for (const [key, action] of Object.entries(voiceCommands)) {
        if (command.includes(key)) {
            console.log('‚úÖ –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É:', key);
            action();
            
            document.getElementById('voice-status-text').textContent = `–í–∏–∫–æ–Ω–∞–Ω–æ: ${key}`;
            return;
        }
    }
    
    document.getElementById('voice-status-text').textContent = '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞';
    console.log('‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞:', command);
}
function toggleVoiceRecognition() {
    if (!voiceRecognition && !initVoiceRecognition()) {
        return;
    }

    if (isListening) {
        stopVoiceRecognition();
    } else {
        startVoiceRecognition();
    }
}
function startVoiceRecognition() {
    if (!voiceRecognition) return;
    voiceRecognition.start();
    isListening = true;
    updateVoiceButton();
}
function stopVoiceRecognition() {
    if (!voiceRecognition) return;
    voiceRecognition.stop();
    isListening = false;
    updateVoiceButton();
}
function updateVoiceButton() {
    const btn = document.getElementById('voice-btn');
    const btnText = document.getElementById('voice-btn-text');
    
    if (isListening) {
        btn.classList.add('active');
        btnText.textContent = '–ó—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è';
    } else {
        btn.classList.remove('active');
        btnText.textContent = '–ü–æ—á–∞—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è';
    }
}
async function initMLModel() {
    try {
        const recognizer = speechCommands.create('BROWSER_FFT');
        await recognizer.ensureModelLoaded();
        speechModel = recognizer;
        document.getElementById('voice-status-text').textContent = 'ML –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞';
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ML –º–æ–¥–µ–ª—ñ:', error);
        return false;
    }
}
function toggleMLMode() {
    useMLModel = !useMLModel;
    document.getElementById('ml-mode-text').textContent = useMLModel ? 'ML: –£–≤—ñ–º–∫' : 'ML: –í–∏–º–∫';
    if (useMLModel && !speechModel) initMLModel();
}
const defaultDevices = {
    'marker-0-0-0': { name: '–†–æ–∑—É–º–Ω–∏–π —Ö–∞–±', type: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä', description: '–û—Å–Ω–æ–≤–Ω–∏–π —Ö–∞–± –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤—Å—ñ–º–∞ IoT –ø—Ä–∏—Å—Ç—Ä–æ—è–º–∏ –≤ –∫–≤–∞—Ä—Ç–∏—Ä—ñ', position: {x: -34.7, y: 6.6, z: -16.90}, mlFeatures: ['–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ ML –º–æ–¥–µ–ª–µ–π', '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—è Edge –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤'] }
};
const edgeMLTypes = {
    vision: { name: '–ö–∞–º–µ—Ä–∞ –∑ Computer Vision', color: '#ff6b6b', mlModels: ['MobileNet', 'TinyYOLO', 'FaceNet'], features: ['–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ª—é–¥–µ–π', '–î–µ—Ç–µ–∫—Ü—ñ—è –∂–µ—Å—Ç—ñ–≤', '–Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –æ–±\'—î–∫—Ç—ñ–≤'] },
    audio: { name: '–ê—É–¥—ñ–æ –ø—Ä–æ—Ü–µ—Å–æ—Ä', color: '#4ecdc4', mlModels: ['TensorFlow Lite Audio', 'YAMNet'], features: ['–ì–æ–ª–æ—Å–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏', '–î–µ—Ç–µ–∫—Ü—ñ—è –∞–Ω–æ–º–∞–ª—å–Ω–∏—Ö –∑–≤—É–∫—ñ–≤', '–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏'] },
    sensor: { name: '–°–µ–Ω—Å–æ—Ä–Ω–∏–π –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä', color: '#45b7d1', mlModels: ['LSTM', 'Autoencoder'], features: ['–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è', '–î–µ—Ç–µ–∫—Ü—ñ—è –∞–Ω–æ–º–∞–ª—ñ–π', '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è'] },
    motion: { name: '–î–µ—Ç–µ–∫—Ç–æ—Ä —Ä—É—Ö—É –∑ ML', color: '#96ceb4', mlModels: ['Pose Detection', 'Activity Recognition'], features: ['–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ', '–î–µ—Ç–µ–∫—Ü—ñ—è –ø–∞–¥—ñ–Ω–Ω—è', '–ê–Ω–∞–ª—ñ–∑ –ø–æ–≤–µ–¥—ñ–Ω–∫–∏'] },
    climate: { name: '–ö–ª—ñ–º–∞—Ç –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∑ ML', color: '#dda0dd', mlModels: ['Time Series Forecasting', 'Regression Models'], features: ['–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏', '–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –µ–Ω–µ—Ä–≥—ñ—ó', '–ê–¥–∞–ø—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è'] },
    light: { name: '–†–æ–∑—É–º–Ω–µ —Å–≤—ñ—Ç–ª–æ', color: '#ffeb3b', mlModels: ['Ambient Light Prediction', 'Presence Detection'], features: ['–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è', '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å', '–ï–∫–æ–Ω–æ–º—ñ—è –µ–Ω–µ—Ä–≥—ñ—ó'] }
};
deviceData = {...defaultDevices};

// –í–ò–ü–†–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—ñ–Ω
function updateWallCreationUI() {
    document.getElementById('start-wall-btn').disabled = isCreatingWall;
    document.getElementById('create-wall-btn').disabled = !isCreatingWall;
    document.getElementById('cancel-wall-btn').disabled = !isCreatingWall;
    document.getElementById('wall-status').textContent = isCreatingWall 
        ? '–ü–µ—Ä–µ–º—ñ—Å—Ç—ñ—Ç—å—Å—è –¥–æ –∫—ñ–Ω—Ü–µ–≤–æ—ó —Ç–æ—á–∫–∏.' 
        : '–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É —Ç–æ—á–∫—É.';
}

function startWallCreation() {
    const camera = document.getElementById('camera');
    wallStartPoint = camera.object3D.getWorldPosition(new THREE.Vector3());
    isCreatingWall = true;
    updateWallCreationUI();
    console.log('üß± –ü–æ—á–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—ñ–Ω–∏ –≤ —Ç–æ—á—Ü—ñ:', wallStartPoint);
}

function cancelWallCreation() {
    wallStartPoint = null;
    isCreatingWall = false;
    updateWallCreationUI();
    console.log('üß± –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç—ñ–Ω–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
}

function createWall() {
    if (!isCreatingWall || !wallStartPoint) return;

    const camera = document.getElementById('camera');
    const endPoint = camera.object3D.getWorldPosition(new THREE.Vector3());

    const wallHeight = 3; 
    const wallDepth = 0.2; // –ó—Ä–æ–±–∏–º–æ —Ç—Ä–æ—Ö–∏ —Ç–æ–≤—â–æ—é –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ –∫–æ–ª—ñ–∑—ñ—ó

    const startVec = new THREE.Vector3(wallStartPoint.x, 0, wallStartPoint.z);
    const endVec = new THREE.Vector3(endPoint.x, 0, endPoint.z);

    const length = startVec.distanceTo(endVec);
    if (length < 0.1) { // –ù–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ —Å—Ç—ñ–Ω–∏
        console.warn("–°—Ç—ñ–Ω–∞ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
        cancelWallCreation();
        return;
    }
    const center = new THREE.Vector3().addVectors(startVec, endVec).multiplyScalar(0.5);
    
    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—É—Ç–∞
    const angle = Math.atan2(endVec.x - startVec.x, endVec.z - startVec.z);
    const rotationY = THREE.MathUtils.radToDeg(angle);

    const wallProperties = {
        id: `wall-${wallCounter}`,
        position: { x: center.x, y: wallHeight / 2, z: center.z },
        rotation: { x: 0, y: rotationY, z: 0 },
        width: wallDepth, // –®–∏—Ä–∏–Ω–∞ —ñ –≥–ª–∏–±–∏–Ω–∞ –º—ñ–Ω—è—é—Ç—å—Å—è –º—ñ—Å—Ü—è–º–∏ –∑ –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        height: wallHeight,
        depth: length,
    };

    createWallFromData(wallProperties);
    wallData.push(wallProperties);
    wallCounter++;

    console.log(`üß± –°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ç—ñ–Ω—É #${wallProperties.id}`);
    cancelWallCreation();
}

function createWallFromData(data) {
    const wall = document.createElement('a-box');
    wall.setAttribute('id', data.id);
    wall.setAttribute('class', 'dynamic-wall');
    wall.setAttribute('position', `${data.position.x} ${data.position.y} ${data.position.z}`);
    wall.setAttribute('rotation', `${data.rotation.x} ${data.rotation.y} ${data.rotation.z}`);
    wall.setAttribute('width', data.width);
    wall.setAttribute('height', data.height);
    wall.setAttribute('depth', data.depth);
    wall.setAttribute('color', '#a0a0a0');
    wall.setAttribute('material', 'color: #BBB; roughness: 0.8');
    wall.setAttribute('shadow', 'cast: true; receive: true');
    
    // –í–ò–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ –≤–∫–∞–∑—É—î–º–æ —Ç–∏–ø —Ç—ñ–ª–∞ –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
    wall.setAttribute('static-body', 'shape: box;');

    document.querySelector('a-scene').appendChild(wall);
}

// –§—É–Ω–∫—Ü—ñ—ó –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–≤—ñ—Ç–ª–æ–º
function createLight() {
    const camera = document.getElementById('camera');
    const pos = camera.object3D.getWorldPosition(new THREE.Vector3());
    const lightId = `light-${lightCounter++}`;
    const lightPosition = {
        x: Math.round(pos.x * 100) / 100,
        y: Math.round(pos.y * 100) / 100 + 5,
        z: Math.round(pos.z * 100) / 100
    };
    const lightEntity = document.createElement('a-entity');
    lightEntity.setAttribute('id', lightId);
    lightEntity.setAttribute('position', `${lightPosition.x} ${lightPosition.y} ${lightPosition.z}`);
    const pointLight = document.createElement('a-light');
    pointLight.setAttribute('type', 'point');
    pointLight.setAttribute('color', '#ffeb3b');
    pointLight.setAttribute('intensity', globalBrightness / 100);
    pointLight.setAttribute('distance', '20');
    pointLight.setAttribute('decay', '2');
    const bulb = document.createElement('a-sphere');
    bulb.setAttribute('radius', '0.3');
    bulb.setAttribute('color', '#ffeb3b');
    bulb.setAttribute('emissive', '#ffeb3b');
    bulb.setAttribute('emissiveIntensity', globalBrightness / 100);
    bulb.setAttribute('opacity', '0.8');
    const text = document.createElement('a-text');
    text.setAttribute('value', `–°–≤—ñ—Ç–ª–æ ${lightCounter - 1}`);
    text.setAttribute('position', '0 0.8 0');
    text.setAttribute('width', '3');
    text.setAttribute('align', 'center');
    text.setAttribute('color', '#fff');
    text.setAttribute('font', '../fonts/calibri-msdf.json');
    lightEntity.appendChild(pointLight);
    lightEntity.appendChild(bulb);
    lightEntity.appendChild(text);
    document.querySelector('a-scene').appendChild(lightEntity);
    lightDevices[lightId] = { id: lightId, name: `–°–≤—ñ—Ç–ª–æ ${lightCounter - 1}`, position: lightPosition, isOn: true, brightness: globalBrightness, element: lightEntity };
}
function toggleAllLights() {
    const anyOn = Object.values(lightDevices).some(light => light.isOn);
    setAllLights(!anyOn);
}
function setAllLights(state) {
    Object.values(lightDevices).forEach(light => {
        light.isOn = state;
        updateLightState(light);
    });
}
function updateBrightness(value) {
    globalBrightness = value;
    document.getElementById('brightness-slider').value = value;
    document.getElementById('brightness-value').textContent = `${value}%`;
    Object.values(lightDevices).forEach(light => {
        light.brightness = value;
        if (light.isOn) updateLightState(light);
    });
    document.getElementById('ambient-light').setAttribute('intensity', 0.3 + (value / 100) * 0.4);
}
function updateLightState(light) {
    const pointLight = light.element.querySelector('a-light');
    const bulb = light.element.querySelector('a-sphere');
    pointLight.setAttribute('intensity', light.isOn ? light.brightness / 100 : '0');
    bulb.setAttribute('emissiveIntensity', light.isOn ? light.brightness / 100 : '0');
    bulb.setAttribute('opacity', light.isOn ? '0.8' : '0.3');
}

// –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø
function setAllLightsColor(color) {
    console.log(`üé® –ó–º—ñ–Ω–∞ –∫–æ–ª—å–æ—Ä—É –≤—Å—ñ—Ö –¥–∂–µ—Ä–µ–ª —Å–≤—ñ—Ç–ª–∞ –Ω–∞: ${color}`);
    Object.values(lightDevices).forEach(light => {
        const pointLight = light.element.querySelector('a-light');
        const bulb = light.element.querySelector('a-sphere');

        if (pointLight) {
            pointLight.setAttribute('color', color);
        }
        if (bulb) {
            bulb.setAttribute('color', color);
            bulb.setAttribute('emissive', color); // –í–∞–∂–ª–∏–≤–æ –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É "—Å–≤—ñ—Ç—ñ–Ω–Ω—è"
        }
        // –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–æ–ª—ñ—Ä —É —Å—Ç–∞–Ω—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
        light.color = color;
    });
}

let currentLightDevice = null;
function toggleLightDevice() {
    if (currentLightDevice) {
        currentLightDevice.isOn = !currentLightDevice.isOn;
        updateLightState(currentLightDevice);
        document.getElementById('light-state').textContent = currentLightDevice.isOn ? '–£–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–í–∏–º–∫–Ω–µ–Ω–æ';
    }
}

// –§—É–Ω–∫—Ü—ñ—ó –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∏—Å–æ—Ç–æ—é, –º–∞—Ä–∫–µ—Ä–∞–º–∏, —ñ–Ω—Ñ–æ-–ø–∞–Ω–µ–ª–ª—é
function changeHeight(direction) {
    const input = document.getElementById('height-input');
    input.value = Math.max(0, Math.min(50, parseInt(input.value) + direction));
    setHeight();
}
function setHeight() {
    const height = document.getElementById('height-input').value;
    const rig = document.getElementById('rig');
    const currentPos = rig.getAttribute('position');
    rig.setAttribute('position', `${currentPos.x} ${height} ${currentPos.z}`);
    document.getElementById('current-height').textContent = height;
}
function createMarkerAtCurrentPosition() {
    const camera = document.getElementById('camera');
    tempMarkerPosition = camera.object3D.getWorldPosition(new THREE.Vector3());
    document.getElementById('marker-form').style.display = 'block';
}
function saveMarker() {
    const name = document.getElementById('marker-name').value || `IoT –ü—Ä–∏—Å—Ç—Ä—ñ–π ${markerCounter}`;
    const description = document.getElementById('marker-description').value || '–†–æ–∑—É–º–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π';
    const mlType = document.getElementById('ml-device-type').value;
    const markerId = `marker-${markerCounter}`;
    const container = document.createElement('a-entity');
    container.setAttribute('id', markerId);
    container.setAttribute('position', `${tempMarkerPosition.x} ${tempMarkerPosition.y} ${tempMarkerPosition.z}`);
    let markerColor = '#00ff88', deviceType = 'IoT –ü—Ä–∏—Å—Ç—Ä—ñ–π', mlModels = [], mlFeatures = [];
    if (mlType && edgeMLTypes[mlType]) {
        const mlDevice = edgeMLTypes[mlType];
        markerColor = mlDevice.color;
        deviceType = mlDevice.name;
        mlModels = mlDevice.mlModels;
        mlFeatures = mlDevice.features;
    }
    const marker = document.createElement('a-sphere');
    marker.setAttribute('class', 'iot-marker');
    marker.setAttribute('radius', '0.5');
    marker.setAttribute('color', markerColor);
    marker.setAttribute('event-set__enter', '_event: mouseenter; scale: 1.2 1.2 1.2');
    marker.setAttribute('event-set__leave', '_event: mouseleave; scale: 1 1 1');
    container.appendChild(marker);
    const text = document.createElement('a-text');
    text.setAttribute('value', name);
    text.setAttribute('position', '0 1 0');
    text.setAttribute('width', '4');
    text.setAttribute('align', 'center');
    container.appendChild(text);
    document.querySelector('a-scene').appendChild(container);
    deviceData[markerId] = { name, type: deviceType, description, position: tempMarkerPosition, mlType, mlModels, mlFeatures, isLight: mlType === 'light' };
    marker.addEventListener('click', () => showIotInfo(markerId));
    markerCounter++;
    cancelMarker();
}
function cancelMarker() {
    document.getElementById('marker-form').style.display = 'none';
    document.getElementById('marker-name').value = '';
    document.getElementById('marker-description').value = '';
    tempMarkerPosition = null;
}
function showIotInfo(markerId) {
    const device = deviceData[markerId];
    if (device) {
        document.getElementById('iot-title').textContent = device.name;
        document.getElementById('iot-type').textContent = device.type;
        document.getElementById('iot-description').textContent = device.description;
        document.getElementById('iot-coords').textContent = `X: ${device.position.x.toFixed(1)}, Y: ${device.position.y.toFixed(1)}, Z: ${device.position.z.toFixed(1)}`;
        document.getElementById('iot-ml-models').textContent = (device.mlModels && device.mlModels.length > 0) ? device.mlModels.join(', ') : '–ù–µ–º–∞—î';
        document.getElementById('iot-ml-features').textContent = (device.mlFeatures && device.mlFeatures.length > 0) ? device.mlFeatures.join(', ') : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó';
        document.getElementById('iot-info-panel').classList.add('active');
    }
}
function closeIotPanel() {
    document.getElementById('iot-info-panel').classList.remove('active');
}

// –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏ –∑ –æ–±'—î–∫—Ç–∞
function loadSceneFromData(importObject) {
    // –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏ –ø–µ—Ä–µ–¥ —ñ–º–ø–æ—Ä—Ç–æ–º
    Object.keys(deviceData).forEach(id => { if (!defaultDevices[id]) document.getElementById(id)?.remove(); });
    Object.keys(lightDevices).forEach(id => document.getElementById(id)?.remove());
    document.querySelectorAll('.dynamic-wall').forEach(wall => wall.remove());

    deviceData = { ...defaultDevices, ...importObject.devices };
    lightDevices = {};
    wallData = [];

    markerCounter = importObject.markerCounter || 1;
    lightCounter = importObject.lightCounter || 1;
    wallCounter = importObject.wallCounter || 1;

    if (importObject.globalBrightness !== undefined) {
        updateBrightness(importObject.globalBrightness);
    }

    // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤
    Object.entries(importObject.devices || {}).forEach(([id, data]) => {
        if (!defaultDevices[id]) createMarkerFromData(id, data);
    });
    Object.entries(importObject.lights || {}).forEach(([id, data]) => createLightFromData(id, data));
    (importObject.walls || []).forEach(data => createWallFromData(data));

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–∞—Å–∏–≤—ñ–≤ –¥–∞–Ω–∏—Ö
    wallData = importObject.walls || [];

    console.log('‚úÖ –°—Ü–µ–Ω—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –¥–∞–Ω–∏—Ö!');
}

// –û–ù–û–í–õ–ï–ù–û: –ï–∫—Å–ø–æ—Ä—Ç —Ç–∞ –Ü–º–ø–æ—Ä—Ç
function exportData() {
    // –°—Ç–≤–æ—Ä—é—î–º–æ "—á–∏—Å—Ç—É" –∫–æ–ø—ñ—é –¥–∞–Ω–∏—Ö –ø—Ä–æ —Å–≤—ñ—Ç–ª–æ –±–µ–∑ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ DOM –µ–ª–µ–º–µ–Ω—Ç–∏
    const cleanLightDevices = {};
    for (const key in lightDevices) {
        const { element, ...rest } = lightDevices[key]; // –í–∏–∫–ª—é—á–∞—î–º–æ 'element'
        cleanLightDevices[key] = rest;
    }

    const exportObject = {
        version: '1.2',
        exportDate: new Date().toISOString(),
        devices: deviceData,
        lights: cleanLightDevices, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–∏—Å—Ç—É –∫–æ–ø—ñ—é
        walls: wallData,
        markerCounter,
        lightCounter,
        wallCounter,
        globalBrightness
    };
    
    try {
        const dataStr = JSON.stringify(exportObject, null, 2);
        const dataBlob = new Blob([dataStr], {type: 'application/json'});
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `smart-home-scene-${Date.now()}.json`;
        link.click();
        console.log('‚úÖ –ï–∫—Å–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–∏–π!');
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É:", error);
        alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å.");
    }
}

function importData(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const importObject = JSON.parse(e.target.result);
            loadSceneFromData(importObject); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é
            alert('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ!');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:', error);
            alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É.');
        }
    };
    reader.readAsText(file);
    event.target.value = '';
}

function createLightFromData(lightId, lightData) {
    const lightEntity = document.createElement('a-entity');
    lightEntity.setAttribute('id', lightId);
    lightEntity.setAttribute('position', `${lightData.position.x} ${lightData.position.y} ${lightData.position.z}`);
    const pointLight = document.createElement('a-light');
    pointLight.setAttribute('type', 'point');
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫–æ–ª—ñ—Ä –∑ –¥–∞–Ω–∏—Ö, –∞–±–æ –∂–æ–≤—Ç–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    const color = lightData.color || '#ffeb3b';
    pointLight.setAttribute('color', color);
    pointLight.setAttribute('intensity', lightData.isOn ? lightData.brightness / 100 : 0);
    const bulb = document.createElement('a-sphere');
    bulb.setAttribute('radius', '0.3');
    bulb.setAttribute('color', color);
    bulb.setAttribute('emissive', color);
    const text = document.createElement('a-text');
    text.setAttribute('value', lightData.name);
    text.setAttribute('position', '0 0.8 0');
    text.setAttribute('width', '3');
    text.setAttribute('align', 'center');
    text.setAttribute('color', '#fff');
    text.setAttribute('font', '../fonts/calibri-msdf.json');

    lightEntity.appendChild(pointLight);
    lightEntity.appendChild(bulb);
    lightEntity.appendChild(text);
    document.querySelector('a-scene').appendChild(lightEntity);
    lightDevices[lightId] = { ...lightData, element: lightEntity };
    updateLightState(lightDevices[lightId]);
}

function createMarkerFromData(markerId, device) {
    const container = document.createElement('a-entity');
    container.setAttribute('id', markerId);
    container.setAttribute('position', `${device.position.x} ${device.position.y} ${device.position.z}`);
    const marker = document.createElement('a-sphere');
    marker.setAttribute('class', 'iot-marker');
    marker.setAttribute('radius', '0.5');
    marker.setAttribute('color', (device.mlType && edgeMLTypes[device.mlType]) ? edgeMLTypes[device.mlType].color : '#00ff88');
    marker.addEventListener('click', () => showIotInfo(markerId));
    container.appendChild(marker);
    const text = document.createElement('a-text');
    text.setAttribute('value', device.name);
    text.setAttribute('position', '0 1 0');
    text.setAttribute('width', '4');
    text.setAttribute('align', 'center');
    text.setAttribute('color', '#fff');
    text.setAttribute('font', '../fonts/calibri-msdf.json');
    container.appendChild(text);
    document.querySelector('a-scene').appendChild(container);
}

// –®–≤–∏–¥–∫—ñ –¥—ñ—ó —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
function resetPosition() {
    const rig = document.getElementById('rig');
    rig.setAttribute('position', '0 1.6 10'); // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤—É –≤–∏—Å–æ—Ç—É
}
function toggleMarkers() {
    markersVisible = !markersVisible;
    document.querySelectorAll('.iot-marker, a-text').forEach(m => m.setAttribute('visible', markersVisible));
}
function updatePositionDisplay() {
    const pos = document.getElementById('camera').object3D.getWorldPosition(new THREE.Vector3());
    document.getElementById('pos-x').textContent = pos.x.toFixed(1);
    document.getElementById('pos-y').textContent = pos.y.toFixed(1);
    document.getElementById('pos-z').textContent = pos.z.toFixed(1);
}

// –û–ù–û–í–õ–ï–ù–û: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ Smart Home XR Tour –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    setHeight();
    updateWallCreationUI();
    setInterval(updatePositionDisplay, 100);
    
    document.querySelector('#marker-0-0-0 .iot-marker')?.addEventListener('click', () => showIotInfo('marker-0-0-0'));
    
    document.addEventListener('keydown', (e) => {
        const keyMap = { 'q': () => changeHeight(1), 'e': () => changeHeight(-1), 'r': resetPosition, 'm': createMarkerAtCurrentPosition, 'h': toggleMarkers, 'v': toggleVoiceRecognition, 'l': createLight, 'b': toggleAllLights };
        keyMap[e.key.toLowerCase()]?.();
    });
    
    document.querySelector('a-scene').addEventListener('click', () => {
        document.querySelector('a-scene').canvas.requestPointerLock();
    });

    // –ù–û–í–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
    fetch('marker-light.json')
        .then(response => {
            if (response.ok) {
                console.log('üóÇÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª marker-light.json. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Å—Ü–µ–Ω—É...');
                return response.json();
            } else {
                throw new Error('–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ —Å—Ü–µ–Ω—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.');
            }
        })
        .then(data => {
            loadSceneFromData(data);
        })
        .catch(error => {
            console.warn(error.message);
        });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
Object.assign(window, {
    changeHeight, setHeight, createMarkerAtCurrentPosition, saveMarker, cancelMarker,
    resetPosition, toggleMarkers, showIotInfo, closeIotPanel, exportData, importData,
    toggleVoiceRecognition, toggleMLMode, createLight, toggleAllLights, updateBrightness,
    toggleLightDevice, startWallCreation, createWall, cancelWallCreation, setAllLightsColor
});
